import asyncio
import logging
from yookassa import Payment
from aiogram.types import InputMediaPhoto

from datetime import timedelta, datetime

import db
import keyboards as kb
from config import conf
from init import bot, log_error
from utils.users_utils import ban_user
from utils.datetime_utils import add_months
from .redis_utils import set_start_recurrent, is_start_recurrent_set
from enums import UserStatus


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
async def check_sub():
    log_error('>>>>>>>>>>>>>>>>>>>>>. check_sub', with_traceback=False)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫–∞–ª—Å—è –ª–∏ —Ä–µ–∫–∫—É—Ä–µ–Ω—Ç
    if is_start_recurrent_set() or conf.debug:
        return False

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ —Ä–µ–∫–∫—É—Ä–µ–Ω—Ç–∞
    set_start_recurrent()

    today = datetime.now(conf.tz).date()
    next_kick_data = today + timedelta(days=2)
    users = await db.get_all_users(status=UserStatus.SUB.value, target_date=next_kick_data)
    for user in users:
        try:
            if user.recurrent:
                if user.kick_date <= today:
                    # amount = await db.get_amount(user.tariff)
                    amount = await db.get_amount('1')

                    payment = Payment.create({
                        "amount": {
                            "value": amount,
                            "currency": "RUB"
                        },
                        'save_payment_method': True,
                        "capture": True,
                        "payment_method_id": user.last_pay_id,
                        "description": user.user_id,
                        "confirmation": {
                            "type": "redirect",
                            "return_url": conf.bot_link
                        },
                        "receipt": {
                            "customer": {
                                "email": user.email
                            },
                            "items": [
                                {
                                    "description": f"Magirani CLUB {user.tariff} –º–µ—Å.",
                                    "quantity": "1.00",
                                    "amount": {
                                        "value": amount,
                                        "currency": "RUB"
                                    },
                                    "vat_code": "1",
                                    "payment_mode": "full_payment",
                                    "pament_subject": "service"
                                }
                            ]
                        },
                    })

                    pay_stat = payment.paid
                    if payment.paid:
                        new_kick_date = add_months(count_months=int(user.tariff), kick_date=user.kick_date)
                        await db.update_user_info(
                            user_id=user.user_id,
                            kick_date=new_kick_date,
                            status=UserStatus.SUB.value,
                            last_pay_id=payment.id,
                            tariff='1'
                        )

                        await db.save_bill(user_id=user.user_id, total_amount=amount, payment_id=payment.id)
                        await db.reg_action (user_id=user.user_id, status='successfully', action='—Å–Ω—è—Ç–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–∞')
                    else:
                        await db.reg_action (
                            user_id=user.user_id,
                            status='failed',
                            action='—Å–Ω—è—Ç–∏–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–∞',
                            comment=f'pay_status: {pay_stat}')

                        await ban_user(user_id=user.user_id)

                else:
                    pass

            else:
                if user.kick_date <= today:
                    try:
                        await ban_user(user.user_id)
                    except Exception as ex:
                        log_error (ex)
                        await db.reg_action (
                            user_id=user.user_id,
                            status='failed',
                            action='–±–∞–Ω –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏',
                            comment=str(ex))

                else:
                    if not user.alarm_2_day:
                        text = (f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {conf.channel_name} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –¥–Ω—è, —á—Ç–æ–±—ã '
                                f'–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.')
                        try:
                            photo_id = await db.get_random_photo_id()
                            await bot.send_photo(chat_id=user.user_id, caption=text, photo=photo_id.photo_id)

                            await db.update_user_info (user_id=user.user_id, alarm_2_day=True)
                            await db.reg_action (
                                user_id=user.user_id,
                                status='successfully',
                                action='–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                                comment=f'–ö–∏–∫ –¥–∞—Ç–∞: {user.kick_date.strftime(conf.date_format)}'
                            )
                        except Exception as ex:
                            await db.reg_action (
                                user_id=user.user_id,
                                status='failed',
                                action='–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                                comment=f'{ex}\n–ö–∏–∫ –¥–∞—Ç–∞: {user.kick_date.strftime (conf.date_format)}'
                            )
                    else:
                        pass

            await asyncio.sleep(3)
        except Exception as ex:
            log_error(ex)
            await db.reg_action (
                user_id=user.user_id,
                status='failed',
                action=f'–í–û–¢ –≠–¢–û —Å–±–æ–π —Ä–µ–∫–∫—É—Ä–µ–Ω—Ç–∞ {user.user_id}',
                comment=f'{ex}'
            )


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ —é –∫–∞—Å—Å–µ
async def check_pay_yoo():
    bills = await db.get_all_pay_yoo()
    for bill in bills:
        payment = Payment.find_one(bill.pay_id)
        if payment.paid:
            user_info = await db.get_user_info(user_id=bill.user_id)
            try:
                new_kick_date = add_months (count_months=bill.tariff, kick_date=user_info.kick_date)
                await db.update_user_info (
                    user_id=user_info.user_id,
                    kick_date=new_kick_date,
                    last_pay_id=payment.id,
                    status=UserStatus.SUB.value,
                    tariff=str(bill.tariff),
                    recurrent=True if bill.tariff == 1 else False
                )

                text = (f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_kick_date.strftime(conf.date_format)}\n\n'
                        f'–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîô –ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" ')

                await db.reg_action (
                    user_id=bill.user_id,
                    status='successfully',
                    action='–æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Æ–∫–∞—Å—Å–∞',
                    comment=f'–¢–∞—Ä–∏—Ñ {bill.tariff}'
                )

            except Exception as ex:
                log_error(ex)
                text = '‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É'
                await db.reg_action (
                    user_id=user_info.user_id,
                    status='failed',
                    action='–æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Æ–∫–∞—Å—Å–∞',
                    comment=f'{ex[:200]}'
                )
                # photo_id = await db.get_random_photo_id ()
                # await bot.send_photo(
                #     chat_id=user_info.user_id,
                #     photo=photo_id.photo_id,
                #     caption=text,
                #     reply_markup=)

            if user_info.status == UserStatus.SUB.value:
                try:
                    photo_id = await db.get_random_photo_id()
                    photo = InputMediaPhoto(media=photo_id.photo_id, caption=text)
                    await bot.edit_message_media(
                        media=photo,
                        chat_id=bill.chat_id, message_id=bill.msg_id, reply_markup=kb.back_start_button())
                except Exception as ex:
                    logging.warning(ex)
            else:
                unban = await bot.unban_chat_member(chat_id=conf.channel_id, user_id=bill.user_id, only_if_banned=True)
                if unban:
                    await db.reg_action (user_id=user_info.user_id, status='successfully', action='—Ä–∞–∑–±–∞–Ω')

                link = await bot.create_chat_invite_link(conf.channel_id, member_limit=1)
                await db.reg_action (
                    user_id=user_info.user_id,
                    status='successfully',
                    action='—Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞',
                    comment=link.invite_link
                )

                try:
                    photo_id = await db.get_random_photo_id()
                    photo = InputMediaPhoto(media=photo_id.photo_id, caption=text)
                    await bot.edit_message_media(
                        media=photo,
                        chat_id=bill.chat_id,
                        message_id=bill.msg_id,
                        reply_markup=kb.succeeded_link_kb(link.invite_link)
                    )
                except Exception as ex:
                    log_error (ex)
                    await db.reg_action (
                        user_id=user_info.user_id,
                        status='failed',
                        action='–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ',
                        comment=f'ex: {ex}'
                    )

            await db.del_from_yoo_temp(bill.id)

            try:
                amount = await db.get_amount(bill.tariff)
                await db.save_bill (user_id=bill.user_id, total_amount=amount, payment_id=payment.id)
                await db.reg_action (
                    user_id=bill.user_id,
                    status='successfully',
                    action='–æ–ø–ª–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
                    comment=payment.id
                )
            except Exception as ex:
                log_error (ex)
                await db.reg_action (
                    user_id=bill.user_id,
                    status='failed',
                    action='–æ–ø–ª–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
                    comment='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–¥'
                )

        else:
            time_msc = bill.time.astimezone (conf.tz)
            time_del = time_msc + timedelta(hours=1)

            if datetime.now(conf.tz) > time_del:
                text = (f'‚ùóÔ∏è–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫.\n'
                        f'–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ üëâ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –∏ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ')

                try:
                    photo_id = await db.get_random_photo_id()
                    photo = InputMediaPhoto(media=photo_id.photo_id, caption=text)
                    await bot.edit_message_media(
                        media=photo,
                        chat_id=bill.chat_id,
                        message_id=bill.msg_id,
                        reply_markup=kb.back_start_button())

                except Exception as ex:
                    logging.warning(f'scheduler 235 {ex}')

                await db.del_from_yoo_temp (bill.id)
                await db.reg_action (
                    user_id=bill.user_id,
                    status='successfully',
                    action='–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É',
                    comment=f'–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {datetime.now(conf.tz)}\n'
                            f'–°—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏: {time_del}'
                )
