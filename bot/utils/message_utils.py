from aiogram.types import InputMediaPhoto
from aiogram.enums.content_type import ContentType
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime, date

import db
import keyboards as kb
from config import conf
from init import bot, log_error
from utils.statistic_utils import get_statistic_text
from enums import UserStatus


# —Ç–µ–∫—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def get_hello_text(text_number: int, user_kick_date: date) -> str:
    data_str = user_kick_date.strftime(conf.date_format)
    if text_number == 1:
        text = f'–¢—ã –∑–¥–µ—Å—å –∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ü–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –£–ñ–ï —Ä–∞–±–æ—Ç–∞–µ—Ç! ' \
               f'<b>–°–∞–º–∞ —ç–Ω–µ—Ä–≥–∏—è –∂–∏–∑–Ω–∏ –≤–µ–¥—ë—Ç —Ç–µ–±—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ...üíú</b>\n\n' \
               f'–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª—É–±—É –Ω–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", ' \
               f'—á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ø–æ–ª–µ –ú–∞–≥–∏—Ä–∞–Ω–∏ <i><b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b></i>.'

    elif text_number == 2:
        text = f'–†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å üåøüîÆ\n\n' \
               f'<b>–ü–µ—Ä–∏–æ–¥ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ MAGIRANI CLUB –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.</b>\n\n' \
               f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –±—ã—Ç—å –≤ –ø–æ–ª–µ –ú–∞–≥–∏—Ä–∞–Ω–∏, –Ω–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"üëá'

    elif text_number == 3:
        text = f'<b>‚ú® –£ –≤–∞—Å –æ–ø–ª–∞—á–µ–Ω –ø–µ—Ä–∏–æ–¥ –¥–æ {data_str}</b>\n\n' \
               f'–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n' \
               f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞–∂–º–∏—Ç–µ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" –∏ "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª".\n' \
               f'–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ "–õ–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"'
    else:
        text = f'<b>‚ú® –£ –≤–∞—Å –æ–ø–ª–∞—á–µ–Ω –ø–µ—Ä–∏–æ–¥ –¥–æ {data_str}</b>\n\n' \
               f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ªüëá\n\n' \
               f'–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ" –∏–ª–∏ ' \
               f'–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.'

    return text


# –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_start_screen_for_user(
        user_id: int,
        content_type: str = ContentType.TEXT.value,
        full_name: str = None,
        username: str = None,
        message_id: int = None
) -> None:
    user_info = await db.get_user_info (user_id=user_id)

    if user_info and user_info.status == UserStatus.BAN.value:
        text = ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —Å–º–æ–≥—É —Å –≤–∞–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. '
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
        await bot.send_message (user_id, text, reply_markup=kb.get_ban_kb())
        return

    text_number = 1
    keyboard_type = 0
    if not user_info:
        await db.add_user (
            user_id=user_id,
            full_name=full_name,
            username=username)

    elif user_info.status == UserStatus.NOT_SUB.value:
        text_number = 2

    elif user_info.status == UserStatus.SUB.value and user_info.recurrent:
        text_number = 3
        keyboard_type = 1

    elif user_info.status == UserStatus.SUB.value and not user_info.recurrent:
        text_number = 4
        keyboard_type = 2

    if user_info and user_info.kick_date:
        user_kick_date = user_info.kick_date
    else:
        user_kick_date = datetime.now (conf.tz).date ()

    if user_info:
        if not full_name:
            full_name = user_info.full_name
        if not username:
            username = user_info.username

        if full_name != user_info.full_name or username != user_info.username:
            try:
                await db.update_user_info (
                    user_id=user_id,
                    full_name=full_name,
                    username=username
                )
            except Exception as ex:
                log_error(f'user_id: {user_id}\nfull_name: {full_name}\nusername: {username}\n',
                          with_traceback=False)
                log_error(ex)

    text = get_hello_text (text_number=text_number, user_kick_date=user_kick_date)

    photo_id = await db.get_random_photo_id ()

    try:
        if content_type == ContentType.TEXT.value:
            if message_id:
                await bot.delete_message(chat_id=user_id, message_id=message_id)

            await bot.send_photo (
                chat_id=user_id,
                photo=photo_id.photo_id,
                caption=text,
                reply_markup=kb.com_start_kb (keyboard_type))
        else:
            photo = InputMediaPhoto (media=photo_id.photo_id, caption=text)
            await bot.edit_message_media (
                chat_id=user_id,
                message_id=message_id,
                media=photo,
                reply_markup=kb.com_start_kb (keyboard_type))
    except TelegramBadRequest as ex:
        log_error(ex, with_traceback=False)

    await db.reg_action(
        user_id=user_id,
        status='successfully',
        action='–ù–∞–∂–∞–ª "–°—Ç–∞—Ä—Ç"'
    )


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
async def send_message_admins(text):
    admins = await db.get_admin_ids ()
    for admin in admins:
        await bot.send_message (admin [0], text)


# –∞–¥–º–∏–Ω –º–µ–Ω—é
async def com_start_admin(user_id):
    text = await get_statistic_text()
    admin = await db.get_admin_info(user_id)
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb.get_first_admin_kb(admin.only_stat))
